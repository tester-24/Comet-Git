name: Run Playwright Tests

on:
  schedule:
    - cron: '0 */6 * * *'  # This runs the workflow every 6 hours
  workflow_dispatch:  # Allows manual trigger

jobs:
  test:
    runs-on: ubuntu-latest  # Use an Ubuntu runner for your tests

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install dependencies
      - name: Install required libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository universe
          sudo apt-get update

          sudo apt-get install -y \
            libwoff1 \
            libvpx7 \
            libevent-2.1-7 \
            libopus0 \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad \
            gstreamer1.0-plugins-ugly \
            gstreamer1.0-libav \
            libgstreamer-plugins-base1.0-0 \
            libgstreamer1.0-0 \
            libharfbuzz-icu0 \
            libhyphen0 \
            libflite1 \
            libgles2-mesa \
            xvfb

          # Install AWS CLI and verify installation
          sudo apt-get install -y awscli
          aws sts get-caller-identity || echo "AWS CLI is installed but the command failed"
        
      # Step 3: Set up JDK 21 with Maven cache
      - name: Set up JDK 21 and Maven cache
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'  # This is the default distribution for setup-java
          cache: 'maven'  # Optional caching for Maven dependencies

    # Step 4: Install Azure CLI and authenticate with Azure DevOps
      - name: Install and authenticate Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az extension add --name azure-devops  # Install Azure DevOps extension
          echo "${{ secrets.AZURE_DEVOPS_TOKEN }}" | az devops login
        env:
          AZURE_DEVOPS_TOKEN: ${{ secrets.AZURE_DEVOPS_TOKEN }}

      # Step 5: Verify Azure CLI and Extensions
      - name: Verify Azure CLI installation
        run: |
          az --version
          az extension list
                
      # Step 4: Navigate to the project directory and run tests
      - name: Install dependencies and run tests
        run: |
          cd CometElite  # Navigate to the directory containing the pom.xml
          xvfb-run mvn clean test  # Run tests with xvfb

      - name: Upload test results to Azure DevOps
        run: |
          az devops test run create \
            --project "your-azure-devops-project" \
            --plan-id "your-test-plan-id" \
            --suite-id "your-test-suite-id" \
            --results-file "./CometElite/target/test-classes/test-report.xml" \
            --detect
        env:
          AZURE_DEVOPS_TOKEN: ${{ secrets.AZURE_DEVOPS_TOKEN }}
          
      - name: Upload Extent Report to S3
        run: |
          # Install AWS CLI if not already installed
          sudo apt-get install awscli

          # Set up AWS CLI with credentials (using secrets)
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

          # Upload the report (adjust the file path based on your report location)
          aws s3 cp ./CometElite/target/extent-report.html s3://comet-reports/reports/extent-report-$(date +'%Y-%m-%d_%H-%M-%S').html
